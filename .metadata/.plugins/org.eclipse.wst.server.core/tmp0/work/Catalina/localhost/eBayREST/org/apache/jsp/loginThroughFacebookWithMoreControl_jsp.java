/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.30
 * Generated at: 2016-07-28 13:40:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class loginThroughFacebookWithMoreControl_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("  // This is called with the results from from FB.getLoginStatus().\r\n");
      out.write("  function statusChangeCallback(response) {\r\n");
      out.write("    console.log('statusChangeCallback');\r\n");
      out.write("    console.log(response);\r\n");
      out.write("    // The response object is returned with a status field that lets the\r\n");
      out.write("    // app know the current login status of the person.\r\n");
      out.write("    // Full docs on the response object can be found in the documentation\r\n");
      out.write("    // for FB.getLoginStatus().\r\n");
      out.write("    if (response.status === 'connected') {\r\n");
      out.write("      // Logged into your app and Facebook.\r\n");
      out.write("      testAPI();\r\n");
      out.write("    } else if (response.status === 'not_authorized') {\r\n");
      out.write("      // The person is logged into Facebook, but not your app.\r\n");
      out.write("      document.getElementById('status').innerHTML = 'Please log ' +\r\n");
      out.write("        'into this app.';\r\n");
      out.write("    } else {\r\n");
      out.write("      // The person is not logged into Facebook, so we're not sure if\r\n");
      out.write("      // they are logged into this app or not.\r\n");
      out.write("      document.getElementById('status').innerHTML = 'Please log ' +\r\n");
      out.write("        'into Facebook.';\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  // This function is called when someone finishes with the Login\r\n");
      out.write("  // Button.  See the onlogin handler attached to it in the sample\r\n");
      out.write("  // code below.\r\n");
      out.write("  function checkLoginState() {\r\n");
      out.write("    FB.getLoginStatus(function(response) {\r\n");
      out.write("      statusChangeCallback(response);\r\n");
      out.write("    });\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  window.fbAsyncInit = function() {\r\n");
      out.write("  FB.init({\r\n");
      out.write("    appId      : '271048883257420',\r\n");
      out.write("    cookie     : true,  // enable cookies to allow the server to access \r\n");
      out.write("                        // the session\r\n");
      out.write("    xfbml      : true,  // parse social plugins on this page\r\n");
      out.write("    version    : 'v2.5' // use graph api version 2.5\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("  // Now that we've initialized the JavaScript SDK, we call \r\n");
      out.write("  // FB.getLoginStatus().  This function gets the state of the\r\n");
      out.write("  // person visiting this page and can return one of three states to\r\n");
      out.write("  // the callback you provide.  They can be:\r\n");
      out.write("  //\r\n");
      out.write("  // 1. Logged into your app ('connected')\r\n");
      out.write("  // 2. Logged into Facebook, but not your app ('not_authorized')\r\n");
      out.write("  // 3. Not logged into Facebook and can't tell if they are logged into\r\n");
      out.write("  //    your app or not.\r\n");
      out.write("  //\r\n");
      out.write("  // These three cases are handled in the callback function.\r\n");
      out.write("\r\n");
      out.write("  FB.getLoginStatus(function(response) {\r\n");
      out.write("    statusChangeCallback(response);\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("  };\r\n");
      out.write("\r\n");
      out.write("  // Load the SDK asynchronously\r\n");
      out.write("  (function(d, s, id) {\r\n");
      out.write("    var js, fjs = d.getElementsByTagName(s)[0];\r\n");
      out.write("    if (d.getElementById(id)) return;\r\n");
      out.write("    js = d.createElement(s); js.id = id;\r\n");
      out.write("    js.src = \"//connect.facebook.net/en_US/sdk.js\";\r\n");
      out.write("    fjs.parentNode.insertBefore(js, fjs);\r\n");
      out.write("  }(document, 'script', 'facebook-jssdk'));\r\n");
      out.write("\r\n");
      out.write("  // Here we run a very simple test of the Graph API after login is\r\n");
      out.write("  // successful.  See statusChangeCallback() for when this call is made.\r\n");
      out.write("  function testAPI() {\r\n");
      out.write("    console.log('Welcome!  Fetching your information.... ');\r\n");
      out.write("    FB.api('/me', 'GET', {\"fields\":\"id,name,email,picture\"}, function(response) {\r\n");
      out.write("   \r\n");
      out.write("    var userName = document.getElementById('status');\r\n");
      out.write("    console.log(\"img url: \"+ response.picture.data.url);\r\n");
      out.write("    img = document.createElement('img');\r\n");
      out.write("    img.src = response.picture.data.url;\r\n");
      out.write("    // document.body.insertBefore(img, userName);\r\n");
      out.write("    userName.innerHTML = response.name + '!';\r\n");
      out.write("    document.getElementById('status').innerHTML += ' Your email id is ' + response.email;\r\n");
      out.write("   \r\n");
      out.write("      console.log('Successful login for: ' + response.email);\r\n");
      out.write("      \r\n");
      out.write("    });\r\n");
      out.write("  }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<!--\r\n");
      out.write("  Below we include the Login Button social plugin. This button uses\r\n");
      out.write("  the JavaScript SDK to present a graphical Login button that triggers\r\n");
      out.write("  the FB.login() function when clicked.\r\n");
      out.write("-->\r\n");
      out.write("\r\n");
      out.write("<fb:login-button scope=\"public_profile,email\" onlogin=\"checkLoginState();\" data-auto-logout-link=\"true\">\r\n");
      out.write("</fb:login-button>\r\n");
      out.write(" \r\n");
      out.write("<div id=\"status\">\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<a href=\"/eBayREST\">Home</a>\r\n");
      out.write("<hr/> \r\n");
      out.write("<div class=\"fb-login-button\" data-max-rows=\"1\" data-size=\"medium\" data-show-faces=\"true\" data-auto-logout-link=\"true\"></div>\r\n");
      out.write("<hr/>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
